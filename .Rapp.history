# pcoa#
pcoa<-pcoa(gowdis(dat[,cats]))#
space<-data.frame(x=jitter(pcoa$vectors[,1], amount=0.005), y=jitter(pcoa$vectors[,2], amount=0.005), z=jitter(pcoa$vectors[,3], amount=0.05))#
# 2D spread....#
points<-cbind(space, abun=dat$Abundance.GBR, species=dat$species)#
#
use<-points[,c("x","y")]#
#use<-points[points$abun=="common",c("x","y")] # only common species#
#
n <- nrow(use) # total species#
s <- 30  # species selected#
spread<-voronoiFilter(use, s)#
spread$species<-points$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)#
# Find 5 nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=4#
gower<-gowdis(dat[,cats])#
knn<-get.knn(gower,k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)
# pcoa#
pcoa<-pcoa(gowdis(dat[,cats]))#
space<-data.frame(x=jitter(pcoa$vectors[,1], amount=0.01), y=jitter(pcoa$vectors[,2], amount=0.01), z=jitter(pcoa$vectors[,3], amount=0.01))#
# 2D spread....#
points<-cbind(space, abun=dat$Abundance.GBR, species=dat$species)#
#
use<-points[,c("x","y")]#
#use<-points[points$abun=="common",c("x","y")] # only common species#
#
n <- nrow(use) # total species#
s <- 30  # species selected#
spread<-voronoiFilter(use, s)#
spread$species<-points$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)#
# Find 5 nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=4#
gower<-gowdis(dat[,cats])#
knn<-get.knn(gower,k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)
n=4#
gower<-gowdis(dat[,cats])#
knn<-get.knn(dat[,cats],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)
knn<-get.knn(dat[,cats],k=n)$nn.index
# Find 5 nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=4#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)
# Find 5 nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=10#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)
# 2D spread....#
points<-cbind(space, abun=dat$Abundance.GBR, species=dat$species)#
#
use<-points[,c("x","y")]#
#use<-points[points$abun=="common",c("x","y")] # only common species#
#
n <- nrow(use) # total species#
s <- 30  # species selected#
spread<-voronoiFilter(use, s)#
spread$species<-points$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)#
# Find 5 nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=10#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)
# Find 5 nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=10#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)
# Find 5 nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=5#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)
# Find 5 nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=8#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)
# Find 5 nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=9#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
head(near)
ifelse(dat$Abundance.GBR=="common", 10, 1)
colnames(dat)
hist(dat$Range.size)
hist(log(dat$Range.size))
hist(log10(dat$Range.size))
quant(dat$Range.size,0.1)
quantile(dat$Range.size,0.1)
ggplot(dat)+geom_hist(aes(x=Range.size))+geom_vline(xintercept=l10)
ggplot(dat)+geom_histogram(aes(x=Range.size))+geom_vline(xintercept=l10)
l10<-quantile(dat$Range.size,0.1)#
#
ggplot(dat)+geom_histogram(aes(x=Range.size))+geom_vline(xintercept=l10)
hist(log10(dat$Range.size))#
line(l10)
hist(log10(dat$Range.size))#
line(x=l10)
hist(log10(dat$Range.size))#
vline(x=l10)
?vline
hist(log10(dat$Range.size))#
abline(v=l10)
hist(dat$Range.size)#
abline(v=l10)
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 10, 1)
colnames(dat)#
#
# abundance #
# very large weighting for abundant species#
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 10, 1)#
#
# range size#
# exclude endemics? - hughes 2001 defines as the lowest 10%#
#
q10<-quantile(dat$Range.size,0.1)#
hist(dat$Range.size)#
abline(v=q10)#
dat$D.rang<-ifelse(dat$Range.size>q10, 3, 1)
# Desirability index#
############################
colnames(dat)#
#
# abundance #
# very large weighting for abundant species#
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 10, 1)#
#
# range size#
# exclude endemics? - hughes 2001 defines as the lowest 10%#
# try bottom 25#
q10<-quantile(dat$Range.size,0.25)#
hist(dat$Range.size)#
abline(v=q10)#
dat$D.rang<-ifelse(dat$Range.size>q10, 1, 0)
q<-quantile(dat$Range.size,0.25)#
hist(dat$Range.size)#
abline(v=q)#
dat$D.rang<-ifelse(dat$Range.size>q, 1, 0)
colnames(dat)
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (top 75% quartile)#
# 15 points for large range (top 75% quartile)#
# 15 points for old #
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, 0)#
#
# colony size#
#
# range size#
q<-quantile(dat$Range.size,0.25)#
dat$D.rang<-ifelse(dat$Range.size>q, 10, 0)#
#hist(dat$Range.size)#
#abline(v=q)
dat$Range.size
dat$D.size<-ifelse(dat$cat_colonydiameter>2, 20, 0)
dat$D.size
colnames(dat)
hist(dat$Species.age.phylogeny)
hist(log10(dat$Species.age.phylogeny))
hist(log10(dat$Genus.fossil.age))
hist(dat$Genus.fossil.age)
# genus age #
hist(log10(dat$Species.age.phylogeny))#
hist(dat$Genus.fossil.age)#
qA<-quantile(dat$Genus.fossil.age,0.25)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)
qA
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)
dat$D.age
qA<-quantile(dat$Species.age.phylogeny,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Species.age.phylogeny>qA, 15, 0)
dat$D.age
hist(log10(dat$Species.age.phylogeny))#
qA<-quantile(dat$Species.age.phylogeny,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Species.age.phylogeny>qA, 15, 0)
colnames(dat)
# genus age #
hist(log10(dat$Species.age.phylogeny))#
hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Species.age.phylogeny,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Species.age.phylogeny>qA, 15, 0)
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age
dat$D.index
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (top 75% quartile)#
# 15 points for large range (top 75% quartile)#
# 15 points for old #
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, 0)#
#
# colony size#
dat$D.size<-ifelse(dat$cat_colonydiameter>2, 20, 0)#
#
# range size#
qR<-quantile(dat$Range.size,0.25)#
dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
#
# genus age #
hist(log10(dat$Species.age.phylogeny))#
hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Species.age.phylogeny,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Species.age.phylogeny>qA, 15, 0)#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age
dat$D.index
head(near)
head(near)
des<-melt(near[,c("group","species","near")], id.var="group")#
(head(des))
# Most desirable in each group#
des<-melt(near[,c("group","species","near")], id.var="group", value.name="species")#
head(des)
# Most desirable in each group#
des<-melt(near[,c("group","species","near")], id.var="group", value.name="species")#
head(des)#
des$D.index<-dat$D.index[match(des$species, dat$species))]
# Most desirable in each group#
des<-melt(near[,c("group","species","near")], id.var="group", value.name="species")#
head(des)#
des$D.index<-dat$D.index[match(des$species, dat$species)]
# Most desirable in each group#
des<-melt(near[,c("group","species","near")], id.var="group", value.name="species")#
head(des)#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
head(des)
aggregate(D.index~group, des, max)
aggregate(D.index+species~group, des, max)
aggregate(D.index~group, des, max)
aggregate(D.index~group, des, max)
# Most desirable in each group#
des<-melt(near[,c("group","species","near")], id.var="group", value.name="species")#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
head(des)#
#
d.agg<-aggregate(D.index~group, des, max)#
merge(d.agg, des)
des
des[order(as.numeric(des$group)),]
# Most desirable in each group#
des<-melt(near[,c("group","species","near")], id.var="group", value.name="species")#
des<-des[order(as.numeric(des$group)),]#
des
near[,c("group","species","near")]
unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
des
d.agg<-aggregate(D.index~group, des, max)#
merge(d.agg, des)
d.max[order(as.numeric(d.max$group)),]
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (top 75% quartile)#
# 15 points for large range (top 75% quartile)#
# 15 points for old #
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, 0)#
#
# colony size#
dat$D.size<-ifelse(dat$cat_colonydiameter>3, 20, 0)#
#
# range size#
qR<-quantile(dat$Range.size,0.25)#
dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
#
# genus age #
hist(log10(dat$Species.age.phylogeny))#
hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Species.age.phylogeny,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Species.age.phylogeny>qA, 15, 0)#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
des#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]
quantile(dat$Genus.fossil.age,0.1, na.rm=T)
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.1, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)
dat$D.age
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)
dat$D.age
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (top 75% quartile)#
# 15 points for large range (top 75% quartile)#
# 15 points for old #
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, 0)#
#
# colony size#
dat$D.size<-ifelse(dat$cat_colonydiameter>3, 20, 0)#
#
# range size#
qR<-quantile(dat$Range.size,0.25)#
dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
des#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]
duplicates(d.max$species)
duplicate(d.max$species)
duplicated(d.max$species)
dmax[,duplicated(d.max$species)]
d.max[duplicated(d.max$species),]
d.max$dupe<-ifelse(d.max$species%in% dupe$species, "duplicate", "")
dupe<-d.max[duplicated(d.max$species),"species"]#
d.max$dupe<-ifelse(d.max$species%in% dupe$species, "duplicate", "")
dupe<-d.max[duplicated(d.max$species),"species"]#
d.max$dupe<-ifelse(d.max$species %in% dupe$species, "duplicate", "")
ifelse(d.max$species %in% dupe$species, "duplicate", "")
dupe<-d.max[duplicated(d.max$species),"species"]#
d.max$dupe<-ifelse(d.max$species %in% dupe, "duplicate", "")
d.max
d.max
# Find 5 nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=4#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (top 75% quartile)#
# 15 points for large range (top 75% quartile)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, 0)#
#
# colony size#
dat$D.size<-ifelse(dat$cat_colonydiameter>3, 20, 0)#
#
# range size#
qR<-quantile(dat$Range.size,0.25)#
dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
des#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]#
#
dupe<-d.max[duplicated(d.max$species),"species"]#
d.max$dupe<-ifelse(d.max$species %in% dupe, "duplicate", "")#
d.max
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
des#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
dupe<-d.max[duplicated(d.max$species),"species"]#
d.max$dupe<-ifelse(d.max$species %in% dupe, "duplicate", "")#
d.max[order(as.numeric(d.max$group)),]
# Find 5 nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=7#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")#
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (top 75% quartile)#
# 15 points for large range (top 75% quartile)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, 0)#
#
# colony size#
dat$D.size<-ifelse(dat$cat_colonydiameter>3, 20, 0)#
#
# range size#
qR<-quantile(dat$Range.size,0.25)#
dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
des#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
dupe<-d.max[duplicated(d.max$species),"species"]#
d.max$dupe<-ifelse(d.max$species %in% dupe, "duplicate", "")#
d.max[order(as.numeric(d.max$group)),]
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (top 75% quartile)#
# 15 points for large range (top 75% quartile)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, 0)#
#
# colony size#
dat$D.size<-ifelse(dat$cat_colonydiameter>3, 20, 0)#
#
# range size#
qR<-quantile(dat$Range.size,0.5)#
dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
des#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
dupe<-d.max[duplicated(d.max$species),"species"]#
d.max$dupe<-ifelse(d.max$species %in% dupe, "duplicate", "")#
d.max[order(as.numeric(d.max$group)),]
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (top 75% quartile)#
# 15 points for large range (top 75% quartile)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, 0)#
#
# colony size#
dat$D.size<-ifelse(dat$cat_colonydiameter>4, 20, 0)#
#
# range size#
qR<-quantile(dat$Range.size,0.25)#
dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
des#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
dupe<-d.max[duplicated(d.max$species),"species"]#
d.max$dupe<-ifelse(d.max$species %in% dupe, "duplicate", "")#
d.max[order(as.numeric(d.max$group)),]
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (top 75% quartile)#
# 15 points for large range (top 75% quartile)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, 0)#
#
# colony size#
dat$D.size<-ifelse(dat$cat_colonydiameter>2, 20, 0)#
#
# range size#
qR<-quantile(dat$Range.size,0.25)#
dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
des#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
dupe<-d.max[duplicated(d.max$species),"species"]#
d.max$dupe<-ifelse(d.max$species %in% dupe, "duplicate", "")#
d.max[order(as.numeric(d.max$group)),]
subset(d.max, dupe=="duplicate")
subset(d.max, dupe=="duplicate")
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age
n=7#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index
knn
# 2D spread....#
points<-cbind(space, abun=dat$Abundance.GBR, species=dat$species)#
#
use<-points[,c("x","y")]#
#use<-points[points$abun=="common",c("x","y")] # only common species#
#
n <- nrow(use) # total species#
s <- 25  # species selected#
spread<-voronoiFilter(use, s)#
spread$species<-points$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
# 2D spread....#
points<-cbind(space, abun=dat$Abundance.GBR, species=dat$species)#
#
use<-points[,c("x","y")]#
#use<-points[points$abun=="common",c("x","y")] # only common species#
#
n <- nrow(use) # total species#
s <- 20  # species selected#
spread<-voronoiFilter(use, s)#
spread$species<-points$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
# 2D spread....#
points<-cbind(space, abun=dat$Abundance.GBR, species=dat$species)#
#
use<-points[,c("x","y")]#
#use<-points[points$abun=="common",c("x","y")] # only common species#
#
n <- nrow(use) # total species#
s <- 25  # species selected#
spread<-voronoiFilter(use, s)#
spread$species<-points$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
# Find nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=7#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
n <- nrow(use) # total species#
s <- 30  # species selected#
spread<-voronoiFilter(use, s)#
spread$species<-points$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
# Find nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=7#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
head(near)
near[duplicated(near$species),]
near<-near[!near$near %in % near$species]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
near<-near[!near$near %in% near$species,]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
duplicated(near$species)
near[duplicated(near$species),]
near[duplicated(near$near),]
near$near[duplicated(near$near)]
# remove duplicates#
near<-near[!near$near %in% near$species,]#
near<-near[!duplicated(near$near),]#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
# Find nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=7#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
#
# remove duplicates#
near<-near[!near$near %in% near$species,]#
#near<-near[!duplicated(near$near),]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
# remove duplicates#
near<-near[!near$near %in% near$species,]#
near<-near[!duplicated(near$near),]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
n <- nrow(use) # total species#
s <- 40  # species selected#
spread<-voronoiFilter(use, s)#
spread$species<-points$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")#
# Find nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=7#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
#
# remove duplicates#
near<-near[!near$near %in% near$species,]#
near<-near[!duplicated(near$near),]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (top 75% quartile)#
# 15 points for large range (top 75% quartile)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, 0)#
#
# colony size#
dat$D.size<-ifelse(dat$cat_colonydiameter>2, 20, 0)#
#
# range size#
qR<-quantile(dat$Range.size,0.25)#
dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
des#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
dupe<-d.max[duplicated(d.max$species),"species"]#
d.max$dupe<-ifelse(d.max$species %in% dupe, "duplicate", "")#
d.max[order(as.numeric(d.max$group)),]#
subset(d.max, dupe=="duplicate")
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
des#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
dupe<-d.max[duplicated(d.max$species),"species"]#
d.max$dupe<-ifelse(d.max$species %in% dupe, "duplicate", "")#
d.max[order(as.numeric(d.max$group)),]
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]
ifelse(dat$Abundance.GBR=="common", 50, 0)
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (top 75% quartile)#
# 15 points for large range (top 75% quartile)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, 0)#
#
# colony size#
dat$D.size<-ifelse(dat$cat_colonydiameter>3, 20, 0)#
#
# range size#
qR<-quantile(dat$Range.size,0.25)#
dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]
dat$D.size<-dat$cat_colonydiameter/max(dat$cat_colonydiameter)*15
dat$D.size
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (ranked)#
# 15 points for large range (ranked)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, dat$Abundance.GBR=="uncommon", 15, 0)#
#
# colony size#
dat$D.size<-dat$cat_colonydiameter/max(dat$cat_colonydiameter)*20#
#
# range size#
#qR<-quantile(dat$Range.size,0.25)#
#dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
dat$D.range<-dat$dat$Range.size/max(dat$dat$Range.size)*15#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (ranked)#
# 15 points for large range (ranked)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, dat$Abundance.GBR=="uncommon", 15, 0)#
#
# colony size#
dat$D.size<-dat$cat_colonydiameter/max(dat$cat_colonydiameter)*20#
#
# range size#
#qR<-quantile(dat$Range.size,0.25)#
#dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
dat$D.range<-dat$dat$Range.size/max(dat$dat$Range.size)*15#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (ranked)#
# 15 points for large range (ranked)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, 0)
# colony size#
dat$D.size<-dat$cat_colonydiameter/max(dat$cat_colonydiameter)*20#
#
# range size#
#qR<-quantile(dat$Range.size,0.25)#
#dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
dat$D.range<-dat$dat$Range.size/max(dat$dat$Range.size)*15
dat$D.range<-dat$Range.size/max(dat$Range.size)*15
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (ranked)#
# 15 points for large range (ranked)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, 0)#
#
# colony size#
dat$D.size<-dat$cat_colonydiameter/max(dat$cat_colonydiameter)*20#
#
# range size#
#qR<-quantile(dat$Range.size,0.25)#
#dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
dat$D.range<-dat$Range.size/max(dat$Range.size)*15#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
#qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
#dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
#dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
dat$D.range<-dat$D.age/max(dat$D.age)*15#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]
#hist(log10(dat$Genus.fossil.age))#
#qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
#dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
#dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
dat$D.range<-dat$D.age/max(dat$D.age)*15#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]
des$D.index
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]
nrow(d.max)
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (ranked)#
# 15 points for large range (ranked)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, ifelse(dat$Abundance.GBR=="uncommon", 10, 0))
# colony size#
dat$D.size<-dat$cat_colonydiameter/max(dat$cat_colonydiameter)*20#
#
# range size#
#qR<-quantile(dat$Range.size,0.25)#
#dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
dat$D.range<-dat$Range.size/max(dat$Range.size)*15#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
#qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
#dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
#dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
dat$D.range<-dat$D.age/max(dat$D.age)*15#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]#
nrow(d.max)
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, ifelse(dat$Abundance.GBR=="uncommon", 10, 0))#
#
# colony size#
dat$D.size<-dat$cat_colonydiameter/max(dat$cat_colonydiameter)*20#
#
# range size#
#qR<-quantile(dat$Range.size,0.25)#
#dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
dat$D.range<-dat$Range.size/max(dat$Range.size)*15#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
#qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
#dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
#dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
dat$D.age<-dat$D.age/max(dat$D.age)*10#
#Species.age.phylogeny#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]#
nrow(d.max)
#qR<-quantile(dat$Range.size,0.25)#
#dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
dat$D.range<-dat$Range.size/max(dat$Range.size)*15#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
#qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
#dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
#dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
dat$D.age<-dat$D.age/max(dat$D.age)*10#
#Species.age.phylogeny#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]#
nrow(d.max)
# range size#
#qR<-quantile(dat$Range.size,0.25)#
#dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
dat$D.range<-dat$Range.size/max(dat$Range.size)*15#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
#qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
#dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
#dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
dat$D.age<-dat$Genus.fossil.age/max(dat$Genus.fossil.age)*10#
#Species.age.phylogeny#
#dat$D.age2<-dat$D.age/max(dat$D.age)*5#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]#
nrow(d.max)
max(dat$Genus.fossil.age)
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
#qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
#dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
#dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
dat$D.age<-dat$Genus.fossil.age/max(dat$Genus.fossil.age, na.rm=T)*10#
#Species.age.phylogeny#
#dat$D.age2<-dat$D.age/max(dat$D.age)*5
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]#
nrow(d.max)
dat$D.age2<-dat$Species.age.phylogeny/max(dat$Species.age.phylogeny)*5
dat$D.age2
dat$D.age2<-dat$Species.age.phylogeny/max(dat$Species.age.phylogeny, na.rm=T)*5
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age+dat$D.age2#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]#
nrow(d.max)
select<-points[points$species %in% d.max$species,]
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=select, aes(x,y))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")
points$D.index<-dat$D.index[match(points$species, dat$species)]#
select<-points[points$species %in% d.max$species,]
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index), shape=21, col="grey")+#
geom_point(data=select, aes(x,y))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index), shape=21, col="grey")+#
geom_point(data=select, aes(x,y))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius()
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index), shape=21, col="grey")+#
geom_point(data=select, aes(x,y))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,1))
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index), shape=21, col="grey")+#
geom_point(data=select, aes(x,y))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,2))
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index), shape=21, col="grey")+#
geom_point(data=select, aes(x,y))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index, col=D.index), shape=21, col="grey")+#
geom_point(data=select, aes(x,y))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index, col=D.index), shape=21)+#
geom_point(data=select, aes(x,y))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index, col=D.index), shape=21)+#
geom_point(data=select, aes(x,y))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))+#
scale_colour_viridius()
library("viridis")#
#
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index, col=D.index), shape=21)+#
geom_point(data=select, aes(x,y))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))+#
scale_colour_viridius()
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index, col=D.index), shape=21)+#
geom_point(data=select, aes(x,y))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))+#
scale_colour_viridis()
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index, col=D.index), shape=21)+#
geom_point(data=select, aes(x,y))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index), shape=21, col="grey")+#
geom_point(data=select, aes(x,y))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index), shape=21, col="grey")+#
geom_point(data=select, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index), shape=21, col="grey")+#
geom_point(data=select, aes(x,y))+#
geom_text(data=select, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))
# 2D spread....#
points<-cbind(space, abun=dat$Abundance.GBR, species=dat$species)#
#
use<-points[,c("x","y")]#
#use<-points[points$abun=="common",c("x","y")] # only common species#
#
n <- nrow(use) # total species#
s <- 30  # species selected#
spread<-voronoiFilter(use, s)#
spread$species<-points$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")#
# Find nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=7#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
#
# remove duplicates#
near<-near[!near$near %in% near$species,]#
near<-near[!duplicated(near$near),]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (ranked)#
# 15 points for large range (ranked)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, ifelse(dat$Abundance.GBR=="uncommon", 10, 0))#
#
# colony size#
dat$D.size<-dat$cat_colonydiameter/max(dat$cat_colonydiameter)*20#
#
# range size#
#qR<-quantile(dat$Range.size,0.25)#
#dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
dat$D.range<-dat$Range.size/max(dat$Range.size)*15#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
#qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
#dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
#dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
dat$D.age<-dat$Genus.fossil.age/max(dat$Genus.fossil.age, na.rm=T)*10#
#Species.age.phylogeny#
dat$D.age2<-dat$Species.age.phylogeny/max(dat$Species.age.phylogeny, na.rm=T)*5#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age+dat$D.age2#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]#
nrow(d.max)#
#
points$D.index<-dat$D.index[match(points$species, dat$species)]#
select<-points[points$species %in% d.max$species,]#
#
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index), shape=21, col="grey")+#
geom_point(data=select, aes(x,y))+#
geom_text(data=select, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))
# 2D spread....#
points<-cbind(space, abun=dat$Abundance.GBR, species=dat$species)#
#
use<-points[,c("x","y")]#
#use<-points[points$abun=="common",c("x","y")] # only common species#
#
n <- nrow(use) # total species#
s <- 20  # species selected#
spread<-voronoiFilter(use, s)#
spread$species<-points$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")#
# Find nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=7#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
#
# remove duplicates#
near<-near[!near$near %in% near$species,]#
near<-near[!duplicated(near$near),]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (ranked)#
# 15 points for large range (ranked)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, ifelse(dat$Abundance.GBR=="uncommon", 10, 0))#
#
# colony size#
dat$D.size<-dat$cat_colonydiameter/max(dat$cat_colonydiameter)*20#
#
# range size#
#qR<-quantile(dat$Range.size,0.25)#
#dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
dat$D.range<-dat$Range.size/max(dat$Range.size)*15#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
#qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
#dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
#dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
dat$D.age<-dat$Genus.fossil.age/max(dat$Genus.fossil.age, na.rm=T)*10#
#Species.age.phylogeny#
dat$D.age2<-dat$Species.age.phylogeny/max(dat$Species.age.phylogeny, na.rm=T)*5#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age+dat$D.age2#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]#
nrow(d.max)#
#
points$D.index<-dat$D.index[match(points$species, dat$species)]#
select<-points[points$species %in% d.max$species,]#
#
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index), shape=21, col="grey")+#
geom_point(data=select, aes(x,y))+#
geom_text(data=select, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))
# 2D spread....#
points<-cbind(space, abun=dat$Abundance.GBR, species=dat$species)#
#
use<-points[,c("x","y")]#
#use<-points[points$abun=="common",c("x","y")] # only common species#
#
n <- nrow(use) # total species#
s <- 40  # species selected#
spread<-voronoiFilter(use, s)#
spread$species<-points$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")#
# Find nearest neighbours in each node...#
library("FNN")#
library("reshape2")#
#
n=7#
#gower<-gowdis(dat[,cats])#
knn<-get.knn(points[,c("x","y")],k=n)$nn.index#
near<-NULL#
for(x in 1:n){#
col<-dat$species[knn[,x]]#
near<-cbind(near, x=col)}#
colnames(near)<-paste("n", seq(1:n), sep="")#
near<-as.data.frame(near)#
near$species <- dat$species#
near<-near[near$species %in% spread$species,]#
near$group<-c(1:nrow(near))#
near<-melt(near, id.var=c("group", "species"), value.name="near")#
near[,c("x1","y1")]<-points[match(near$species, points$species),c("x","y")]#
near[,c("x2","y2")]<-points[match(near$near, points$species), c("x","y")]#
head(near)#
#
# remove duplicates#
near<-near[!near$near %in% near$species,]#
near<-near[!duplicated(near$near),]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_segment(data=near, aes(x=x1, y=y1, xend=x2, yend=y2), size=0.1)+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)+#
labs(x="principal component 1", y="principal component 2")#
# Desirability index (out of 100)#
############################
# 50 points for common (categorical - ctb)#
# 20 points for large size (ranked)#
# 15 points for large range (ranked)#
# 15 points for old (top 75% quartile)#
# restorability ?#
colnames(dat)#
#
# abundance #
dat$D.abun<-ifelse(dat$Abundance.GBR=="common", 50, ifelse(dat$Abundance.GBR=="uncommon", 10, 0))#
#
# colony size#
dat$D.size<-dat$cat_colonydiameter/max(dat$cat_colonydiameter)*20#
#
# range size#
#qR<-quantile(dat$Range.size,0.25)#
#dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
dat$D.range<-dat$Range.size/max(dat$Range.size)*15#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
#qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
#dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
#dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
dat$D.age<-dat$Genus.fossil.age/max(dat$Genus.fossil.age, na.rm=T)*10#
#Species.age.phylogeny#
dat$D.age2<-dat$Species.age.phylogeny/max(dat$Species.age.phylogeny, na.rm=T)*5#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age+dat$D.age2#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]#
nrow(d.max)#
#
points$D.index<-dat$D.index[match(points$species, dat$species)]#
select<-points[points$species %in% d.max$species,]#
#
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index), shape=21, col="grey")+#
geom_point(data=select, aes(x,y))+#
geom_text(data=select, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))
head(select)
knn2<-get.knn(select[,c("x","y")],k=nrow(select))
knn2<-get.knn(select[,c("x","y")],k=nrow(select)-1)
knn2
knn2<-get.knn(select[,c("x","y")],k=nrow(select)-1)$nn.dist#
head(knn2)
daisy(select[,c("x","y")],dist="euclidean")
library("vegan")#
#
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
knn2<-daisy(select[,c("x","y")],dist="euclidean")
dist(select[,c("x","y")])
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-dist(select[,c("x","y")])
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-melt(dist(select[,c("x","y")]))#
head(knn2)
dist(select[,c("x","y")])
dist(select[,c("x","y")])
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-data.frame(dist(select[,c("x","y")]))#
head(knn2)
as.matrix(dist(select[,c("x","y")]))
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
#head(knn2)#
#
diag(knn2)
lower.tri(x, diag = FALSE)
lower.tri(knn2, diag = FALSE)
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
#head(knn2)#
knn2[lower.tri(knn2, diag = FALSE),]
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
#head(knn2)#
knn2[lower.tri(knn2, diag = FALSE)]
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
#head(knn2)#
knn2[lower.tri(knn2, diag = FALSE),]
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
#head(knn2)#
knn2[lower.tri(knn2, diag = FALSE)]<-NA
knn2
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
#head(knn2)#
knn2[upper.tri(knn2, diag = FALSE)]<-NA#
#
knn2
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = FALSE)]<-NA#
knn2<-melt(knn2)#
knn2<-knn2[!is.na(knn2),]
knn2
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = FALSE)]<-NA#
knn2<-melt(knn2)#
knn2<-knn2[!is.na(knn2)]#
knn2
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = FALSE)]<-NA#
knn2<-melt(knn2)#
#knn2<-knn2[!is.na(knn2)]#
knn2
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = FALSE)]<-NA#
knn2<-melt(knn2)#
knn2<-knn2[!is.na(knn2$value)]#
knn2
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = FALSE)]<-NA#
knn2<-melt(knn2)#
head(knn2)
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = TRUE)]<-NA#
knn2<-melt(knn2)#
head(knn2)
knn2<-knn2[!is.na(knn2$value)]
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = TRUE)]<-NA#
knn2<-melt(knn2)#
head(knn2)#
knn2<-knn2[!is.na(knn2$value),]#
knn2
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = TRUE)]<-NA#
knn2<-melt(knn2)#
knn2<-knn2[!is.na(knn2$value),]#
head(knn2)
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = TRUE)]<-NA#
knn2<-melt(knn2, value.name="dist")#
knn2<-knn2[!is.na(knn2$value),]#
head(knn2)
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = TRUE)]<-NA#
knn2<-melt(knn2)#
knn2<-knn2[!is.na(knn2$value),]#
head(knn2)
knn2[order(knn2$value),]
pairs<-knn2[order(knn2$value),]
head(pairs)
pairs<-knn2[order(knn2$value),]#
head(pairs)
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = TRUE)]<-NA#
knn2<-melt(knn2)#
knn2<-knn2[!is.na(knn2$value),]#
#
pairs<-knn2[order(knn2$value),]#
head(pairs)
c(1:s)
c(1:s)
pairs<-knn2[order(knn2$value),][c(1:20),]#
head(pairs)
pairs
pairs<-knn2[order(knn2$value),][c(1:20),]#
pairs
pairs$D1<-dat$D.index[match(pairs$Var1, dat$species)]
pairs<-knn2[order(knn2$value),][c(1:20),]#
pairs$D1<-dat$D.index[match(pairs$Var1, dat$species)]#
pairs
pairs<-knn2[order(knn2$value),][c(1:20),]#
pairs$D1<-dat$D.index[match(pairs$Var1, dat$species)]#
pairs$D2<-dat$D.index[match(pairs$Var1, dat$species)]#
pairs
pairs<-knn2[order(knn2$value),][c(1:20),]#
pairs$D1<-dat$D.index[match(pairs$Var1, dat$species)]#
pairs$D2<-dat$D.index[match(pairs$Var2, dat$species)]#
pairs
# range size#
#qR<-quantile(dat$Range.size,0.25)#
#dat$D.rang<-ifelse(dat$Range.size>qR, 15, 0)#
#hist(dat$Range.size)#
#abline(v=qR)#
dat$D.range<-dat$Range.size/max(dat$Range.size)*15#
#
# genus age #
#hist(log10(dat$Species.age.phylogeny))#
#hist(log10(dat$Genus.fossil.age))#
#qA<-quantile(dat$Genus.fossil.age,0.25, na.rm=T)#
#dat$D.age<-ifelse(dat$Genus.fossil.age>qA, 15, 0)#
dat$D.age<-dat$Genus.fossil.age/max(dat$Genus.fossil.age, na.rm=T)*10#
dat$D.age[is.na(dat$D.age)]<-15 # benefit of doubt#
#Species.age.phylogeny#
dat$D.age2<-dat$Species.age.phylogeny/max(dat$Species.age.phylogeny, na.rm=T)*5#
#
dat$D.index<-dat$D.abun+dat$D.size+dat$D.rang+dat$D.age+dat$D.age2#
# Most desirable in each group#
#
des<-unique(melt(near[,c("group","species","near")], id.var="group", value.name="species"))#
des<-des[order(as.numeric(des$group)),]#
des$D.index<-dat$D.index[match(des$species, dat$species)]#
#
d.agg<-aggregate(D.index~group, des, max)#
d.max<-merge(d.agg, des)#
d.max[order(as.numeric(d.max$group)),]#
nrow(d.max)#
#
points$D.index<-dat$D.index[match(points$species, dat$species)]#
select<-points[points$species %in% d.max$species,]#
#
ggplot()+#
geom_point(data=points, aes(x,y, size=D.index), shape=21, col="grey")+#
geom_point(data=select, aes(x,y))+#
geom_text(data=select, aes(x,y, label=species), size=2, position=position_nudge(x=diff(range(spread$x))*0.07, y=diff(range(spread$y))*0.01))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
labs(x="principal component 1", y="principal component 2")+#
scale_radius(range=c(0,3))
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = TRUE)]<-NA#
knn2<-melt(knn2)#
knn2<-knn2[!is.na(knn2$value),]#
#
pairs<-knn2[order(knn2$value),][c(1:20),]#
pairs$D1<-dat$D.index[match(pairs$Var1, dat$species)]#
pairs$D2<-dat$D.index[match(pairs$Var2, dat$species)]#
pairs
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = TRUE)]<-NA#
knn2<-melt(knn2)#
knn2<-knn2[!is.na(knn2$value),]#
#
pairs<-knn2[order(knn2$value),][c(1:25),]#
pairs$D1<-dat$D.index[match(pairs$Var1, dat$species)]#
pairs$D2<-dat$D.index[match(pairs$Var2, dat$species)]#
pairs
# self thinning... #
# find closest pairs, remove lowest D.index#
head(select)#
rownames(select)<-select$species#
knn2<-as.matrix(dist(select[,c("x","y")]))#
knn2[upper.tri(knn2, diag = TRUE)]<-NA#
knn2<-melt(knn2)#
knn2<-knn2[!is.na(knn2$value),]#
#
pairs<-knn2[order(knn2$value),][c(1:15),]#
pairs$D1<-dat$D.index[match(pairs$Var1, dat$species)]#
pairs$D2<-dat$D.index[match(pairs$Var2, dat$species)]#
pairs
min(c(pairs$D1, pairs$D2))
min(c(pairs$D1, pairs$D2))
