setwd("/Users/mikemcwilliam/Documents/PostDoc/species_choice")
source("data_prep.R")
# Anyalsis#
library(tripack)#
source("R/functions.R")
# points selection#
#
#n <- 100 # total species#
#s <- 20  # species selected#
#dat <- data.frame(x=rnorm(n), y=rnorm(n))#
#plot(y ~ x, dat, col="grey")#
#
# random#
#points(y ~ x, dat[sample(1:n, s, replace=FALSE),], col="red", pch=20, cex=0.6)#
#
# most evenly spread#
#points(y ~ x, voronoiFilter(dat, s), col="blue", pch=20, cex=0.6)#
dat<-read.csv("data/data.csv")#
dat$Abundance.GBR<-factor(dat$Abundance.GBR, levels=c("rare","uncommon", "common"))#
# pnas traits#
cats<-c("cat_growthrate", "cat_corallitesize", "cat_colonydiameter" , "cat_skeletaldensity", "cat_colonyheight","cat_SA_vol", "cat_spacesize")#
pca<-prcomp(dat[,cats], center=T, scale=T)#
points<-data.frame(species=dat$species, pc1=pca$x[,1],pc2=pca$x[,2],pc3=pca$x[,3],pc4=pca$x[,4])#
#biplot(pca)#
# DIAZ PLOT#
library("vegan")#
library("ks")#
#
# use princomp for PCA for being consistent with scaling of scores in Sandra's analysis #
prin<-princomp((dat[,cats]), cor = TRUE, scores = TRUE)#
pc12<-prin$scores[,1:2]#
ll<-prin$loadings#
#
#pc12[,1]<-pc12[,1]*-1#
#ll[,1]<-ll[,1]*-1#
#
# # check for consistent results#
# pc12[,1]<-pc12[,1]*-1#
# #plot(pc12[,1]*-1, pca12[,1])#
# plot(pc12[,1], dat[,18])#
# cor(pc12[,1], dat[,18])#
#
################ KERNEL DENSITY ESTIMATION ###############################
H <- Hpi(x=pc12)      # optimal bandwidth estimation#
est<- kde(x=pc12, H=H, compute.cont=TRUE)     # kernel density estimation#
#
# set contour probabilities for drawing contour levels#
cl<-contourLevels(est, prob=c(0.5, 0.05, 0.001), approx=TRUE)#
#
fit<-envfit(pc12, dat[,cats]) # use envfit for drawing arrows, can be also done using trait loadings#
fit2<-fit$vectors$arrows*-1 # drawing line segments in arrow opposites direction for pretty layout#
#
fit2<-fit$vectors$arrows*-1#
fit2[1,]<-fit2[1,]*3 # leafarea#
fit2[2,]<-fit2[2,]*3 # leaf N#
fit2[3,]<-fit2[3,]*3 # LMA#
fit2[4,]<-fit2[4,]*3 # height#
fit2[5,]<-fit2[5,]*3 # seed mass#
 fit2[6,]<-fit2[6,]*3 # stem density#
 fit2[7,]<-fit2[7,]*3 # stem density#
#fit$vectors#
#
#pdf("_PCA_BLOB_FINAL.pdf", width=8, height=6)#
par(mar=c(4,4,2,2))#
plot(est, cont=seq(1,100,by=1), display="filled.contour2", add=FALSE, ylab="", xlab="", cex.axis=0.75, ylim=c(-3, 3.5), xlim=c(-4, 5),las=1) #
plot(est,abs.cont=cl[1], labels=c(0.5),labcex=0.75, add=TRUE, lwd=0.75, col="grey30")#
plot(est,abs.cont=cl[2], labels=c(0.95),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
plot(est,abs.cont=cl[3], labels=c(0.99),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
points( pc12[,], pch=16, cex=0.25, col="black") #
plot(fit, cex=0.90, col=1, labels=list(vectors = c("GR","CW","MCS","SD","CH","SAV","IS")))#
segments(0,0, fit2[,1], fit2[,2], col=1, lty=2, lwd=1)#
mtext("PC1", cex=0.75, side=1, line=0.5, adj=1)#
mtext("PC2", cex=0.75, side=2, line=0.5, at=5.3) #, las=2)#
#dev.off()#
# 2D#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
n <- nrow(points) # total species#
s <- 20  # species selected#
#
spread<-voronoiFilter(points, s)#
#
#plot(y ~ x, points, col="grey")#
# random#
#points(y ~ x, points[sample(1:n, s, replace=FALSE),], col="red", pch=20, cex=0.6)#
# most evenly spread#
#points(y ~ x, spread, col="blue", pch=20, cex=0.6)#
#
spread$species<-dat$species[as.numeric(rownames(spread))]#
spread$abundance<-dat$Abundance.GBR[as.numeric(rownames(spread))]#
#
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y, col=abundance))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
#pdf("_PCA_BLOB_FINAL.pdf", width=8, height=6)#
par(mar=c(4,4,2,2))#
plot(est, cont=seq(1,100,by=1), display="filled.contour2", add=FALSE, ylab="", xlab="", cex.axis=0.75, ylim=c(-3, 3.5), xlim=c(-4, 5),las=1) #
plot(est,abs.cont=cl[1], labels=c(0.5),labcex=0.75, add=TRUE, lwd=0.75, col="grey30")#
plot(est,abs.cont=cl[2], labels=c(0.95),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
plot(est,abs.cont=cl[3], labels=c(0.99),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
points( pc12[,], pch=16, cex=0.25, col="black") #
plot(fit, cex=0.90, col=1, labels=list(vectors = c("GR","CW","MCS","SD","CH","SAV","IS")))#
segments(0,0, fit2[,1], fit2[,2], col=1, lty=2, lwd=1)#
mtext("PC1", cex=0.75, side=1, line=0.5, adj=1)#
mtext("PC2", cex=0.75, side=2, line=0.5, at=5.3) #, las=2)#
#dev.off()
# -- mike wd -- ##
#setwd("/Users/mikemcwilliam/Documents/PostDoc/species_choice")#
source("data_prep.R")#
# Anyalsis#
library(tripack)#
source("R/functions.R")#
#
# points selection#
#
#n <- 100 # total species#
#s <- 20  # species selected#
#dat <- data.frame(x=rnorm(n), y=rnorm(n))#
#plot(y ~ x, dat, col="grey")#
#
# random#
#points(y ~ x, dat[sample(1:n, s, replace=FALSE),], col="red", pch=20, cex=0.6)#
#
# most evenly spread#
#points(y ~ x, voronoiFilter(dat, s), col="blue", pch=20, cex=0.6)#
dat<-read.csv("data/data.csv")#
dat$Abundance.GBR<-factor(dat$Abundance.GBR, levels=c("rare","uncommon", "common"))#
# pnas traits#
cats<-c("cat_growthrate", "cat_corallitesize", "cat_colonydiameter" , "cat_skeletaldensity", "cat_colonyheight","cat_SA_vol", "cat_spacesize")#
pca<-prcomp(dat[,cats], center=T, scale=T)#
points<-data.frame(species=dat$species, pc1=pca$x[,1],pc2=pca$x[,2],pc3=pca$x[,3],pc4=pca$x[,4])#
#biplot(pca)
# DIAZ PLOT#
library("vegan")#
library("ks")#
#
# use princomp for PCA for being consistent with scaling of scores in Sandra's analysis #
prin<-princomp((dat[,cats]), cor = TRUE, scores = TRUE)#
pc12<-prin$scores[,1:2]#
ll<-prin$loadings#
#
#pc12[,1]<-pc12[,1]*-1#
#ll[,1]<-ll[,1]*-1#
#
# # check for consistent results#
# pc12[,1]<-pc12[,1]*-1#
# #plot(pc12[,1]*-1, pca12[,1])#
# plot(pc12[,1], dat[,18])#
# cor(pc12[,1], dat[,18])#
#
################ KERNEL DENSITY ESTIMATION ###############################
H <- Hpi(x=pc12)      # optimal bandwidth estimation#
est<- kde(x=pc12, H=H, compute.cont=TRUE)     # kernel density estimation#
#
# set contour probabilities for drawing contour levels#
cl<-contourLevels(est, prob=c(0.5, 0.05, 0.001), approx=TRUE)#
#
fit<-envfit(pc12, dat[,cats]) # use envfit for drawing arrows, can be also done using trait loadings#
fit2<-fit$vectors$arrows*-1 # drawing line segments in arrow opposites direction for pretty layout#
#
fit2<-fit$vectors$arrows*-1#
fit2[1,]<-fit2[1,]*3 # leafarea#
fit2[2,]<-fit2[2,]*3 # leaf N#
fit2[3,]<-fit2[3,]*3 # LMA#
fit2[4,]<-fit2[4,]*3 # height#
fit2[5,]<-fit2[5,]*3 # seed mass#
 fit2[6,]<-fit2[6,]*3 # stem density#
 fit2[7,]<-fit2[7,]*3 # stem density
#pdf("_PCA_BLOB_FINAL.pdf", width=8, height=6)#
par(mar=c(4,4,2,2))#
plot(est, cont=seq(1,100,by=1), display="filled.contour2", add=FALSE, ylab="", xlab="", cex.axis=0.75, ylim=c(-3, 3.5), xlim=c(-4, 5),las=1) #
plot(est,abs.cont=cl[1], labels=c(0.5),labcex=0.75, add=TRUE, lwd=0.75, col="grey30")#
plot(est,abs.cont=cl[2], labels=c(0.95),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
plot(est,abs.cont=cl[3], labels=c(0.99),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
points( pc12[,], pch=16, cex=0.25, col="black") #
plot(fit, cex=0.90, col=1, labels=list(vectors = c("GR","CW","MCS","SD","CH","SAV","IS")))#
segments(0,0, fit2[,1], fit2[,2], col=1, lty=2, lwd=1)#
mtext("PC1", cex=0.75, side=1, line=0.5, adj=1)#
mtext("PC2", cex=0.75, side=2, line=0.5, at=5.3) #, las=2)#
#dev.off()
# 2D#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
n <- nrow(points) # total species#
s <- 20  # species selected#
#
spread<-voronoiFilter(points, s)#
#
#plot(y ~ x, points, col="grey")#
# random#
#points(y ~ x, points[sample(1:n, s, replace=FALSE),], col="red", pch=20, cex=0.6)#
# most evenly spread#
#points(y ~ x, spread, col="blue", pch=20, cex=0.6)#
#
spread$species<-dat$species[as.numeric(rownames(spread))]#
spread$abundance<-dat$Abundance.GBR[as.numeric(rownames(spread))]#
#
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y, col=abundance))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y, col=abundance))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
n <- nrow(points) # total species#
s <- 20  # species selected#
#
spread<-voronoiFilter(points, s)#
#
#plot(y ~ x, points, col="grey")#
# random#
#points(y ~ x, points[sample(1:n, s, replace=FALSE),], col="red", pch=20, cex=0.6)#
# most evenly spread#
#points(y ~ x, spread, col="blue", pch=20, cex=0.6)#
#
spread$species<-dat$species[as.numeric(rownames(spread))]#
spread$abundance<-dat$Abundance.GBR[as.numeric(rownames(spread))]#
#
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y, col=abundance))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
abun<-rbind(points, dat$Abundance.GBR)
abun<-rbind(points, dat$Abundance.GBR)#
head(abun)
abun<-rbind(points, dat$Abundance.GBR, species=dat$species)#
head(abun)
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
abun<-cbind(points, dat$Abundance.GBR, species=dat$species)#
head(abun)
comm<-cbind(points, abun=dat$Abundance.GBR, species=species=dat$species)#
comm<-comm[comm$abun=="common",]#
head(comm)
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
comm<-cbind(points, abun=dat$Abundance.GBR, species=species=dat$species)#
comm<-comm[comm$abun=="common",]#
head(comm)
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
comm<-cbind(points, abun=dat$Abundance.GBR, species=dat$species)#
comm<-comm[comm$abun=="common",]#
head(comm)
# Only common species#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
comm<-cbind(points, abun=dat$Abundance.GBR, species=dat$species)#
comm<-comm[comm$abun=="common",]#
head(comm)#
#
spread<-voronoiFilter(comm, s)#
#
n <- nrow(points) # total species#
s <- 20  # species selected
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
comm<-cbind(points, abun=dat$Abundance.GBR)#
comm<-comm[comm$abun=="common",c("x","y")]#
head(comm)
n <- nrow(comm) # total species#
s <- 20  # species selected#
spread<-voronoiFilter(comm, s)
abuns<-cbind(points, abun=dat$Abundance.GBR, species=dat$species)#
comm<-abuns[abuns$abun=="common",c("x","y")]#
head(comm)
spread$species<-abuns$species[as.numeric(rownames(spread))]
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y, col=abundance))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y, col=abundance))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
cl
fit2[1,]
par(mar=c(4,4,2,2))#
plot(est, cont=seq(1,100,by=1), display="filled.contour2", add=FALSE, ylab="", xlab="", cex.axis=0.75, ylim=c(-3, 3.5), xlim=c(-4, 5),las=1) #
plot(est,abs.cont=cl[1], labels=c(0.5),labcex=0.75, add=TRUE, lwd=0.75, col="grey30")#
plot(est,abs.cont=cl[2], labels=c(0.95),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
plot(est,abs.cont=cl[3], labels=c(0.99),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
points( pc12[,], pch=16, cex=0.25, col="black") #
plot(fit, cex=0.90, col=1, labels=list(vectors = c("GR","CW","MCS","SD","CH","SAV","IS")))#
segments(0,0, fit2[,1], fit2[,2], col=1, lty=2, lwd=1)#
mtext("PC1", cex=0.75, side=1, line=0.5, adj=1)#
mtext("PC2", cex=0.75, side=2, line=0.5, at=5.3) #, las=2)
# DIAZ PLOT#
library("vegan")#
library("ks")#
#
prin<-princomp((dat[,cats]), cor = TRUE, scores = TRUE)#
pc12<-prin$scores[,1:2]#
ll<-prin$loadings#
#
################ KERNEL DENSITY ESTIMATION ###############################
H <- Hpi(x=pc12)      # optimal bandwidth estimation#
est<- kde(x=pc12, H=H, compute.cont=TRUE)    # kernel density estimation#
#
# set contour probabilities for drawing contour levels#
cl<-contourLevels(est, prob=c(0.5, 0.05, 0.001), approx=TRUE)#
#
fit<-envfit(pc12, dat[,cats]) # use envfit for drawing arrows#
fit2<-fit$vectors$arrows*-1 # drawing line segments opposite arrows#
fit2[1,]<-fit2[1,]*3 # leafarea#
fit2[2,]<-fit2[2,]*3 # leaf N#
fit2[3,]<-fit2[3,]*3 # LMA#
fit2[4,]<-fit2[4,]*3 # height#
fit2[5,]<-fit2[5,]*3 # seed mass#
 fit2[6,]<-fit2[6,]*3 # stem density#
 fit2[7,]<-fit2[7,]*3 # stem density#
#
par(mar=c(4,4,2,2))#
plot(est, cont=seq(1,100,by=1), display="filled.contour2", add=FALSE, ylab="", xlab="", cex.axis=0.75, ylim=c(-3, 3.5), xlim=c(-4, 5),las=1) #
plot(est,abs.cont=cl[1], labels=c(0.5),labcex=0.75, add=TRUE, lwd=0.75, col="grey30")#
plot(est,abs.cont=cl[2], labels=c(0.95),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
plot(est,abs.cont=cl[3], labels=c(0.99),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
points( pc12[,], pch=16, cex=0.25, col="black") #
plot(fit, cex=0.90, col=1, labels=list(vectors = c("GR","CW","MCS","SD","CH","SAV","IS")))#
segments(0,0, fit2[,1], fit2[,2], col=1, lty=2, lwd=1)#
mtext("PC1", cex=0.75, side=1, line=0.5, adj=1)#
mtext("PC2", cex=0.75, side=2, line=0.5, at=5.3) #, las=2)
# All species#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
n <- nrow(points) # total species#
s <- 20  # species selected#
spread<-voronoiFilter(points, s)#
#
spread$species<-dat$species[as.numeric(rownames(spread))]#
spread$abundance<-dat$Abundance.GBR[as.numeric(rownames(spread))]#
#
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y, col=abundance))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
clipp<-cbind(points, clipp=dat$clipperton)
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=clipp[clipp$clipp=="yes",],aes(x,y))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
clipp<-cbind(points, clipp=dat$clipperton)#
head(clipp)
# Clipperton species#
#
clipp<-cbind(points, clipp=dat$clipperton)#
head(clipp)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=clipp[clipp$clipp==1,],aes(x,y))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
clipp<-cbind(points, clipp=dat$clipperton, species=dataspecies)#
head(clipp)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=clipp[clipp$clipp==1,],aes(x,y))+#
geom_text(data=clipp[clipp$clipp==1,], aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
# Clipperton species#
#
clipp<-cbind(points, clipp=dat$clipperton, species=dat$species)#
head(clipp)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=clipp[clipp$clipp==1,],aes(x,y))+#
geom_text(data=clipp[clipp$clipp==1,], aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
clipp<-cbind(points, clipp=dat$clipperton, species=dat$species)#
head(clipp)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=clipp[clipp$clipp==1,],aes(x,y))+#
geom_text(data=clipp[clipp$clipp==1,], aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
ggtitle("Clipperton atoll")
# Only common species#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
abuns<-cbind(points, abun=dat$Abundance.GBR, species=dat$species)#
comm<-abuns[abuns$abun=="common",c("x","y")]#
head(comm)#
#
n <- nrow(comm) # total species#
s <- 20  # species selected#
spread<-voronoiFilter(comm, s)#
spread$species<-abuns$species[as.numeric(rownames(spread))]#
#
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
nrow(comm)
nrow(comm)#
n <- nrow(comm) # total species#
s <- 20  # species selected#
spread<-voronoiFilter(comm, s)#
spread$species<-abuns$species[as.numeric(rownames(spread))]#
#
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
nrow(comm)#
n <- nrow(comm) # total species#
s <- 25  # species selected#
spread<-voronoiFilter(comm, s)#
spread$species<-abuns$species[as.numeric(rownames(spread))]#
#
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
nrow(comm)#
n <- nrow(comm) # total species#
s <- 30  # species selected#
spread<-voronoiFilter(comm, s)#
spread$species<-abuns$species[as.numeric(rownames(spread))]#
#
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+theme_blank()
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+theme_void()
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+theme_void()
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.01)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+theme_void()
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.1)+#
geom_point(data=spread, aes(x,y))+theme_void()
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.25)+#
geom_point(data=spread, aes(x,y))+theme_void()
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.25)+#
geom_point(data=spread, aes(x,y), size=0.25)+theme_void()
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.25)+theme_void()
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.5)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()
legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void(), #
xmin = 1, xmax = 3, ymin = -0.3, ymax = 0.6))
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 1, xmax = 3, ymin = -0.3, ymax = 0.6)
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 4, ymin = 2, ymax = 3)
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 4.5, ymin = 2, ymax = 3)
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)
# DIAZ PLOT#
library("vegan")#
library("ks")#
#
prin<-princomp((dat[,cats]), cor = TRUE, scores = TRUE)#
pc12<-prin$scores[,1:2]#
ll<-prin$loadings#
#
################ KERNEL DENSITY ESTIMATION ###############################
H <- Hpi(x=pc12)      # optimal bandwidth estimation#
est<- kde(x=pc12, H=H, compute.cont=TRUE)    # kernel density estimation#
#
# set contour probabilities for drawing contour levels#
cl<-contourLevels(est, prob=c(0.5, 0.05, 0.001), approx=TRUE)#
#
fit<-envfit(pc12, dat[,cats]) # use envfit for drawing arrows#
fit2<-fit$vectors$arrows*-1 # drawing line segments opposite arrows#
fit2[1,]<-fit2[1,]*3 # leafarea#
fit2[2,]<-fit2[2,]*3 # leaf N#
fit2[3,]<-fit2[3,]*3 # LMA#
fit2[4,]<-fit2[4,]*3 # height#
fit2[5,]<-fit2[5,]*3 # seed mass#
 fit2[6,]<-fit2[6,]*3 # stem density#
 fit2[7,]<-fit2[7,]*3 # stem density#
#
par(mar=c(4,4,2,2))#
plot(est, cont=seq(1,100,by=1), display="filled.contour2", add=FALSE, ylab="", xlab="", cex.axis=0.75, ylim=c(-3, 3.5), xlim=c(-4, 5),las=1) #
plot(est,abs.cont=cl[1], labels=c(0.5),labcex=0.75, add=TRUE, lwd=0.75, col="grey30")#
plot(est,abs.cont=cl[2], labels=c(0.95),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
plot(est,abs.cont=cl[3], labels=c(0.99),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
points( pc12[,], pch=16, cex=0.25, col="black") #
plot(fit, cex=0.90, col=1, labels=list(vectors = c("GR","CW","MCS","SD","CH","SAV","IS")))#
segments(0,0, fit2[,1], fit2[,2], col=1, lty=2, lwd=1)#
mtext("PC1", cex=0.75, side=1, line=0.5, adj=1)#
mtext("PC2", cex=0.75, side=2, line=0.5, at=5.3) #, las=2)
install.packages(c("rgl", "car"))
library("car")
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25), z=jitter(prin$scores[,3], amount=0.25))
# -- mike wd -- ##
#setwd("/Users/mikemcwilliam/Documents/PostDoc/species_choice")#
source("data_prep.R")#
# Anyalsis#
library(tripack)#
source("R/functions.R")#
#
# points selection#
#
#n <- 100 # total species#
#s <- 20  # species selected#
#dat <- data.frame(x=rnorm(n), y=rnorm(n))#
#plot(y ~ x, dat, col="grey")#
#
# random#
#points(y ~ x, dat[sample(1:n, s, replace=FALSE),], col="red", pch=20, cex=0.6)#
#
# most evenly spread#
#points(y ~ x, voronoiFilter(dat, s), col="blue", pch=20, cex=0.6)#
dat<-read.csv("data/data.csv")#
dat$Abundance.GBR<-factor(dat$Abundance.GBR, levels=c("rare","uncommon", "common"))#
# pnas traits#
cats<-c("cat_growthrate", "cat_corallitesize", "cat_colonydiameter" , "cat_skeletaldensity", "cat_colonyheight","cat_SA_vol", "cat_spacesize")#
pca<-prcomp(dat[,cats], center=T, scale=T)#
points<-data.frame(species=dat$species, pc1=pca$x[,1],pc2=pca$x[,2],pc3=pca$x[,3],pc4=pca$x[,4])#
#biplot(pca)#
# DIAZ PLOT#
library("vegan")#
library("ks")#
#
prin<-princomp((dat[,cats]), cor = TRUE, scores = TRUE)#
pc12<-prin$scores[,1:2]#
ll<-prin$loadings#
#
################ KERNEL DENSITY ESTIMATION ###############################
H <- Hpi(x=pc12)      # optimal bandwidth estimation#
est<- kde(x=pc12, H=H, compute.cont=TRUE)    # kernel density estimation#
#
# set contour probabilities for drawing contour levels#
cl<-contourLevels(est, prob=c(0.5, 0.05, 0.001), approx=TRUE)#
#
fit<-envfit(pc12, dat[,cats]) # use envfit for drawing arrows#
fit2<-fit$vectors$arrows*-1 # drawing line segments opposite arrows#
fit2[1,]<-fit2[1,]*3 # leafarea#
fit2[2,]<-fit2[2,]*3 # leaf N#
fit2[3,]<-fit2[3,]*3 # LMA#
fit2[4,]<-fit2[4,]*3 # height#
fit2[5,]<-fit2[5,]*3 # seed mass#
 fit2[6,]<-fit2[6,]*3 # stem density#
 fit2[7,]<-fit2[7,]*3 # stem density#
#
par(mar=c(4,4,2,2))#
plot(est, cont=seq(1,100,by=1), display="filled.contour2", add=FALSE, ylab="", xlab="", cex.axis=0.75, ylim=c(-3, 3.5), xlim=c(-4, 5),las=1) #
plot(est,abs.cont=cl[1], labels=c(0.5),labcex=0.75, add=TRUE, lwd=0.75, col="grey30")#
plot(est,abs.cont=cl[2], labels=c(0.95),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
plot(est,abs.cont=cl[3], labels=c(0.99),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
points( pc12[,], pch=16, cex=0.25, col="black") #
plot(fit, cex=0.90, col=1, labels=list(vectors = c("GR","CW","MCS","SD","CH","SAV","IS")))#
segments(0,0, fit2[,1], fit2[,2], col=1, lty=2, lwd=1)#
mtext("PC1", cex=0.75, side=1, line=0.5, adj=1)#
mtext("PC2", cex=0.75, side=2, line=0.5, at=5.3) #, las=2)#
# All species#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
n <- nrow(points) # total species#
s <- 20  # species selected#
spread<-voronoiFilter(points, s)#
#
spread$species<-dat$species[as.numeric(rownames(spread))]#
spread$abundance<-dat$Abundance.GBR[as.numeric(rownames(spread))]#
#
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y, col=abundance))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))#
# Only common species#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
abuns<-cbind(points, abun=dat$Abundance.GBR, species=dat$species)#
comm<-abuns[abuns$abun=="common",c("x","y")]#
head(comm)#
#
nrow(comm)#
n <- nrow(comm) # total species#
s <- 30  # species selected#
spread<-voronoiFilter(comm, s)#
spread$species<-abuns$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)#
# Clipperton species#
#
clipp<-cbind(points, clipp=dat$clipperton, species=dat$species)#
head(clipp)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=clipp[clipp$clipp==1,],aes(x,y))+#
geom_text(data=clipp[clipp$clipp==1,], aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
ggtitle("Clipperton atoll")#
# 3D interactive plots#
#
library("car")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25), z=jitter(prin$scores[,3], amount=0.25))
# 3D interactive plots#
#
library("car")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))
scatter3d(x, y, z, data=points)
y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)
scatter3d(x~y~z, data=points)
scatter3d(x~y+z, data=points)
scatter3d(y~x+z, data=points)
brary("car")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)#
#
scatter3d(y~x+z, data=points)
# 3D interactive plots#
#
library("car")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)#
#
scatter3d(y~x+z, data=points)
library("car")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)
scatter3d(y~x+z, points)
scatter3d(points$x, points$y, points$z)
nteractive plots#
#
library("car")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)#
#
scatter3d(y~x+z, points)#
scatter3d(points$x, points$y, points$z)
source("data_prep.R")#
# Anyalsis#
library(tripack)#
source("R/functions.R")#
#
# points selection#
#
#n <- 100 # total species#
#s <- 20  # species selected#
#dat <- data.frame(x=rnorm(n), y=rnorm(n))#
#plot(y ~ x, dat, col="grey")#
#
# random#
#points(y ~ x, dat[sample(1:n, s, replace=FALSE),], col="red", pch=20, cex=0.6)#
#
# most evenly spread#
#points(y ~ x, voronoiFilter(dat, s), col="blue", pch=20, cex=0.6)#
dat<-read.csv("data/data.csv")#
dat$Abundance.GBR<-factor(dat$Abundance.GBR, levels=c("rare","uncommon", "common"))#
# pnas traits#
cats<-c("cat_growthrate", "cat_corallitesize", "cat_colonydiameter" , "cat_skeletaldensity", "cat_colonyheight","cat_SA_vol", "cat_spacesize")#
pca<-prcomp(dat[,cats], center=T, scale=T)#
points<-data.frame(species=dat$species, pc1=pca$x[,1],pc2=pca$x[,2],pc3=pca$x[,3],pc4=pca$x[,4])#
#biplot(pca)
# DIAZ PLOT#
library("vegan")#
library("ks")#
#
prin<-princomp((dat[,cats]), cor = TRUE, scores = TRUE)#
pc12<-prin$scores[,1:2]#
ll<-prin$loadings#
#
################ KERNEL DENSITY ESTIMATION ###############################
H <- Hpi(x=pc12)      # optimal bandwidth estimation#
est<- kde(x=pc12, H=H, compute.cont=TRUE)    # kernel density estimation#
#
# set contour probabilities for drawing contour levels#
cl<-contourLevels(est, prob=c(0.5, 0.05, 0.001), approx=TRUE)#
#
fit<-envfit(pc12, dat[,cats]) # use envfit for drawing arrows#
fit2<-fit$vectors$arrows*-1 # drawing line segments opposite arrows#
fit2[1,]<-fit2[1,]*3 # leafarea#
fit2[2,]<-fit2[2,]*3 # leaf N#
fit2[3,]<-fit2[3,]*3 # LMA#
fit2[4,]<-fit2[4,]*3 # height#
fit2[5,]<-fit2[5,]*3 # seed mass#
 fit2[6,]<-fit2[6,]*3 # stem density#
 fit2[7,]<-fit2[7,]*3 # stem density#
#
par(mar=c(4,4,2,2))#
plot(est, cont=seq(1,100,by=1), display="filled.contour2", add=FALSE, ylab="", xlab="", cex.axis=0.75, ylim=c(-3, 3.5), xlim=c(-4, 5),las=1) #
plot(est,abs.cont=cl[1], labels=c(0.5),labcex=0.75, add=TRUE, lwd=0.75, col="grey30")#
plot(est,abs.cont=cl[2], labels=c(0.95),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
plot(est,abs.cont=cl[3], labels=c(0.99),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
points( pc12[,], pch=16, cex=0.25, col="black") #
plot(fit, cex=0.90, col=1, labels=list(vectors = c("GR","CW","MCS","SD","CH","SAV","IS")))#
segments(0,0, fit2[,1], fit2[,2], col=1, lty=2, lwd=1)#
mtext("PC1", cex=0.75, side=1, line=0.5, adj=1)#
mtext("PC2", cex=0.75, side=2, line=0.5, at=5.3) #, las=2)
# 3D interactive plots#
#
library("car")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)#
#
scatter3d(y~x+z, points)#
scatter3d(points$x, points$y, points$z)
# 3D interactive plots#
#
library("car")#
library("rgl")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)#
#
scatter3d(y~x+z, points)#
scatter3d(points$x, points$y, points$z)
# 3D interactive plots#
#
library("car")#
library("rgl")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)#
#
scatter3d(y~x+z, points)
install.package("rgl")
install.packages("rgl")
# 3D interactive plots#
#
library("car")#
library("rgl")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)#
#
scatter3d(y~x+z, points)
scatter3d(y~x+z, points)
scatter3d(y~x+z, points)#
scatter3d(points$x, points$y, points$z)
scatter3d(y~x+z, points)
# -- mike wd -- ##
#setwd("/Users/mikemcwilliam/Documents/PostDoc/species_choice")#
source("data_prep.R")#
# Anyalsis#
library(tripack)#
source("R/functions.R")#
#
# points selection#
#
#n <- 100 # total species#
#s <- 20  # species selected#
#dat <- data.frame(x=rnorm(n), y=rnorm(n))#
#plot(y ~ x, dat, col="grey")#
#
# random#
#points(y ~ x, dat[sample(1:n, s, replace=FALSE),], col="red", pch=20, cex=0.6)#
#
# most evenly spread#
#points(y ~ x, voronoiFilter(dat, s), col="blue", pch=20, cex=0.6)
dat<-read.csv("data/data.csv")#
dat$Abundance.GBR<-factor(dat$Abundance.GBR, levels=c("rare","uncommon", "common"))#
# pnas traits#
cats<-c("cat_growthrate", "cat_corallitesize", "cat_colonydiameter" , "cat_skeletaldensity", "cat_colonyheight","cat_SA_vol", "cat_spacesize")#
pca<-prcomp(dat[,cats], center=T, scale=T)#
points<-data.frame(species=dat$species, pc1=pca$x[,1],pc2=pca$x[,2],pc3=pca$x[,3],pc4=pca$x[,4])#
#biplot(pca)#
# DIAZ PLOT#
library("vegan")#
library("ks")#
#
prin<-princomp((dat[,cats]), cor = TRUE, scores = TRUE)#
pc12<-prin$scores[,1:2]#
ll<-prin$loadings#
#
################ KERNEL DENSITY ESTIMATION ###############################
H <- Hpi(x=pc12)      # optimal bandwidth estimation#
est<- kde(x=pc12, H=H, compute.cont=TRUE)    # kernel density estimation#
#
# set contour probabilities for drawing contour levels#
cl<-contourLevels(est, prob=c(0.5, 0.05, 0.001), approx=TRUE)#
#
fit<-envfit(pc12, dat[,cats]) # use envfit for drawing arrows#
fit2<-fit$vectors$arrows*-1 # drawing line segments opposite arrows#
fit2[1,]<-fit2[1,]*3 # leafarea#
fit2[2,]<-fit2[2,]*3 # leaf N#
fit2[3,]<-fit2[3,]*3 # LMA#
fit2[4,]<-fit2[4,]*3 # height#
fit2[5,]<-fit2[5,]*3 # seed mass#
 fit2[6,]<-fit2[6,]*3 # stem density#
 fit2[7,]<-fit2[7,]*3 # stem density#
#
par(mar=c(4,4,2,2))#
plot(est, cont=seq(1,100,by=1), display="filled.contour2", add=FALSE, ylab="", xlab="", cex.axis=0.75, ylim=c(-3, 3.5), xlim=c(-4, 5),las=1) #
plot(est,abs.cont=cl[1], labels=c(0.5),labcex=0.75, add=TRUE, lwd=0.75, col="grey30")#
plot(est,abs.cont=cl[2], labels=c(0.95),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
plot(est,abs.cont=cl[3], labels=c(0.99),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
points( pc12[,], pch=16, cex=0.25, col="black") #
plot(fit, cex=0.90, col=1, labels=list(vectors = c("GR","CW","MCS","SD","CH","SAV","IS")))#
segments(0,0, fit2[,1], fit2[,2], col=1, lty=2, lwd=1)#
mtext("PC1", cex=0.75, side=1, line=0.5, adj=1)#
mtext("PC2", cex=0.75, side=2, line=0.5, at=5.3) #, las=2)#
# All species#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
n <- nrow(points) # total species#
s <- 20  # species selected#
spread<-voronoiFilter(points, s)#
#
spread$species<-dat$species[as.numeric(rownames(spread))]#
spread$abundance<-dat$Abundance.GBR[as.numeric(rownames(spread))]#
#
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y, col=abundance))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))#
# Only common species#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
abuns<-cbind(points, abun=dat$Abundance.GBR, species=dat$species)#
comm<-abuns[abuns$abun=="common",c("x","y")]#
head(comm)#
#
nrow(comm)#
n <- nrow(comm) # total species#
s <- 30  # species selected#
spread<-voronoiFilter(comm, s)#
spread$species<-abuns$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)
# Clipperton species#
#
clipp<-cbind(points, clipp=dat$clipperton, species=dat$species)#
head(clipp)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=clipp[clipp$clipp==1,],aes(x,y))+#
geom_text(data=clipp[clipp$clipp==1,], aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
ggtitle("Clipperton atoll")#
# 3D interactive plots#
#
library("car")#
library("rgl")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)#
#
scatter3d(y~x+z, points)#
scatter3d(points$x, points$y, points$z)
# 3D interactive plots#
#
library("car")#
library("rgl")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)#
#
scatter3d(y~x+z, points)
# -- mike wd -- ##
#setwd("/Users/mikemcwilliam/Documents/PostDoc/species_choice")#
source("data_prep.R")#
# Anyalsis#
library(tripack)#
source("R/functions.R")#
#
# points selection#
#
#n <- 100 # total species#
#s <- 20  # species selected#
#dat <- data.frame(x=rnorm(n), y=rnorm(n))#
#plot(y ~ x, dat, col="grey")#
#
# random#
#points(y ~ x, dat[sample(1:n, s, replace=FALSE),], col="red", pch=20, cex=0.6)#
#
# most evenly spread#
#points(y ~ x, voronoiFilter(dat, s), col="blue", pch=20, cex=0.6)#
dat<-read.csv("data/data.csv")#
dat$Abundance.GBR<-factor(dat$Abundance.GBR, levels=c("rare","uncommon", "common"))#
# pnas traits#
cats<-c("cat_growthrate", "cat_corallitesize", "cat_colonydiameter" , "cat_skeletaldensity", "cat_colonyheight","cat_SA_vol", "cat_spacesize")#
pca<-prcomp(dat[,cats], center=T, scale=T)#
points<-data.frame(species=dat$species, pc1=pca$x[,1],pc2=pca$x[,2],pc3=pca$x[,3],pc4=pca$x[,4])#
#biplot(pca)#
# DIAZ PLOT#
library("vegan")#
library("ks")#
#
prin<-princomp((dat[,cats]), cor = TRUE, scores = TRUE)#
pc12<-prin$scores[,1:2]#
ll<-prin$loadings#
#
################ KERNEL DENSITY ESTIMATION ###############################
H <- Hpi(x=pc12)      # optimal bandwidth estimation#
est<- kde(x=pc12, H=H, compute.cont=TRUE)    # kernel density estimation#
#
# set contour probabilities for drawing contour levels#
cl<-contourLevels(est, prob=c(0.5, 0.05, 0.001), approx=TRUE)#
#
fit<-envfit(pc12, dat[,cats]) # use envfit for drawing arrows#
fit2<-fit$vectors$arrows*-1 # drawing line segments opposite arrows#
fit2[1,]<-fit2[1,]*3 # leafarea#
fit2[2,]<-fit2[2,]*3 # leaf N#
fit2[3,]<-fit2[3,]*3 # LMA#
fit2[4,]<-fit2[4,]*3 # height#
fit2[5,]<-fit2[5,]*3 # seed mass#
 fit2[6,]<-fit2[6,]*3 # stem density#
 fit2[7,]<-fit2[7,]*3 # stem density#
#
par(mar=c(4,4,2,2))#
plot(est, cont=seq(1,100,by=1), display="filled.contour2", add=FALSE, ylab="", xlab="", cex.axis=0.75, ylim=c(-3, 3.5), xlim=c(-4, 5),las=1) #
plot(est,abs.cont=cl[1], labels=c(0.5),labcex=0.75, add=TRUE, lwd=0.75, col="grey30")#
plot(est,abs.cont=cl[2], labels=c(0.95),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
plot(est,abs.cont=cl[3], labels=c(0.99),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
points( pc12[,], pch=16, cex=0.25, col="black") #
plot(fit, cex=0.90, col=1, labels=list(vectors = c("GR","CW","MCS","SD","CH","SAV","IS")))#
segments(0,0, fit2[,1], fit2[,2], col=1, lty=2, lwd=1)#
mtext("PC1", cex=0.75, side=1, line=0.5, adj=1)#
mtext("PC2", cex=0.75, side=2, line=0.5, at=5.3) #, las=2)
# 3D interactive plots#
#
library("car")#
library("rgl")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)#
#
scatter3d(y~x+z, points)#
scatter3d(points$x, points$y, points$z)
# -- mike wd -- ##
#setwd("/Users/mikemcwilliam/Documents/PostDoc/species_choice")#
source("data_prep.R")#
# Anyalsis#
library(tripack)#
source("R/functions.R")#
#
# points selection#
#
#n <- 100 # total species#
#s <- 20  # species selected#
#dat <- data.frame(x=rnorm(n), y=rnorm(n))#
#plot(y ~ x, dat, col="grey")#
#
# random#
#points(y ~ x, dat[sample(1:n, s, replace=FALSE),], col="red", pch=20, cex=0.6)#
#
# most evenly spread#
#points(y ~ x, voronoiFilter(dat, s), col="blue", pch=20, cex=0.6)#
dat<-read.csv("data/data.csv")#
dat$Abundance.GBR<-factor(dat$Abundance.GBR, levels=c("rare","uncommon", "common"))#
# pnas traits#
cats<-c("cat_growthrate", "cat_corallitesize", "cat_colonydiameter" , "cat_skeletaldensity", "cat_colonyheight","cat_SA_vol", "cat_spacesize")#
pca<-prcomp(dat[,cats], center=T, scale=T)#
points<-data.frame(species=dat$species, pc1=pca$x[,1],pc2=pca$x[,2],pc3=pca$x[,3],pc4=pca$x[,4])#
#biplot(pca)
# DIAZ PLOT#
library("vegan")#
library("ks")#
#
prin<-princomp((dat[,cats]), cor = TRUE, scores = TRUE)#
pc12<-prin$scores[,1:2]#
ll<-prin$loadings#
#
################ KERNEL DENSITY ESTIMATION ###############################
H <- Hpi(x=pc12)      # optimal bandwidth estimation#
est<- kde(x=pc12, H=H, compute.cont=TRUE)    # kernel density estimation#
#
# set contour probabilities for drawing contour levels#
cl<-contourLevels(est, prob=c(0.5, 0.05, 0.001), approx=TRUE)#
#
fit<-envfit(pc12, dat[,cats]) # use envfit for drawing arrows#
fit2<-fit$vectors$arrows*-1 # drawing line segments opposite arrows#
fit2[1,]<-fit2[1,]*3 # leafarea#
fit2[2,]<-fit2[2,]*3 # leaf N#
fit2[3,]<-fit2[3,]*3 # LMA#
fit2[4,]<-fit2[4,]*3 # height#
fit2[5,]<-fit2[5,]*3 # seed mass#
 fit2[6,]<-fit2[6,]*3 # stem density#
 fit2[7,]<-fit2[7,]*3 # stem density
# 3D interactive plots#
#
library("car")#
library("rgl")#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15))#
head(points)#
#
scatter3d(y~x+z, points)#
scatter3d(points$x, points$y, points$z)
scatter3d(y~x+z, points, grid=FALSE)
scatter3d(y~x+z, points, surface=FALSE)
scatter3d(y~x+z, points, surface=FALSE, xlab="pc1", ylab="pc2", zlab="pc3")
scatter3d(y~x+z, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3")
# Only common species#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
abuns<-cbind(points, abun=dat$Abundance.GBR, species=dat$species)#
comm<-abuns[abuns$abun=="common",c("x","y")]#
head(comm)#
#
nrow(comm)#
n <- nrow(comm) # total species#
s <- 30  # species selected#
spread<-voronoiFilter(comm, s)#
spread$species<-abuns$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$group<-ifelse(points$species %in% spreas$species, "selected","")#
#
head(points)
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3")
library("rgl")#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$group<-ifelse(points$species %in% spreas$species, "selected","")#
#
head(points)#
#
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3")
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$group<-ifelse(points$species %in% spread$species, "selected","")#
#
head(points)#
#
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3")
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$group<-ifelse(points$species %in% spread$species, "y","n")#
#
head(points)#
#
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3")
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$group<-as.factor(ifelse(points$species %in% spread$species, "y","n"))#
#
head(points)
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3")
# 3D interactive plots#
#
library("car")#
library("rgl")#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$group<-as.factor(ifelse(points$species %in% spread$species, "y","n"))#
#
head(points)#
#
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3")
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  surface.col = c("#999999", "#E69F00"))
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  surface.col = c("#999999", "#E69F00"), size=2)
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  surface.col = c("#999999", "#E69F00"), size=4)
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  surface.col = c("#999999", "#E69F00"), lwd=4)
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$group<-as.factor(ifelse(points$species %in% spread$species, "y","n"))#
points$labels<-ifelse(points$group=="y",points$species, "")
points$labels
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  surface.col = c("#999999", "#E69F00"), labels = labels)
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  surface.col = c("#999999", "#E69F00"), labels = points$labels)
points$labels
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  surface.col = c("#999999", "#E69F00"), labels = points$labels, id.n=nrow(iris))
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  size=5)
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  size=25)
scatter3d()#
rgl.spheres(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  size=25)
rgl.open()# Open a new RGL device#
rgl.bg(color = "white") # Setup the background color#
rgl.spheres(y~x+z | group, r = 0.2, color = "grey")
rgl.open()# Open a new RGL device#
rgl.bg(color = "white") # Setup the background color#
rgl.spheres(y~x+z | group, data=points, r = 0.2, color = "grey")
rgl.open()# Open a new RGL device#
rgl.bg(color = "white") # Setup the background color#
rgl.spheres(points$x, points$y, points$z, group=points$group, r = 0.2, color = "grey")
rgl.open()# Open a new RGL device#
rgl.bg(color = "white") # Setup the background color#
rgl.spheres(points$x, points$y, points$z, group=points$group, r = 0.1, color = "grey")
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  size=25)
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  size=25, axis.col="grey")
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  size=25, axis.col=c("grey","grey","grey"))
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  size=25, axis.col=c("grey","grey","grey"), point.col=c("slategrey","red"))
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  size=25, axis.col=c("grey","grey","grey"), point.col="red")
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  size=25, axis.col=c("grey","grey","grey"), surface.col=c("slategrey","red"))
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3",  size=25, axis.col=c("grey","grey","grey"), surface.col=c("slategrey","red"), radius=2)
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3", axis.col=c("grey","grey","grey"), surface.col=c("slategrey","red"), radius=2)
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3", axis.col=c("grey","grey","grey"), surface.col=c("slategrey","red"), labels=points$labels)
points$labels
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$group<-as.factor(ifelse(points$species %in% spread$species, "y","n"))#
points$labs<-ifelse(points$group=="y",points$species, "")#
head(points)#
#
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3", axis.col=c("grey","grey","grey"), surface.col=c("slategrey","red"), labels=labs)
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3", axis.col=c("grey","grey","grey"), surface.col=c("slategrey","red"), labels=points$labs)
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3", axis.col=c("grey","grey","grey"), surface.col=c("slategrey","red"), labels=points$species)
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3", axis.col=c("grey","grey","grey"), surface.col=c("slategrey","red"), labels=species)
scatter3d(y~x+z | group, points, surface=FALSE, xlab="PC1", ylab="PC2", zlab="PC3", axis.col=c("grey","grey","grey"), surface.col=c("slategrey","red"), labels = rownames(points), id.n=nrow(points))
rownames(points)
plot3d(points$x, points$y, points$z, type="s", size=1, lit=TRUE, main = "Car Weight Vs Engine Displacement Vs Mileage",sub="3-D Plot")
plot3d(points$x, points$y, points$z, type="s", size=1, lit=TRUE, main = "Coral trait space")
plot3d(points$x, points$y, points$z, type="s", size=1, lit=TRUE, main="coral trait space", xlab="PC1", ylab="PC2", zlab="PC3")
plot3d(points$x, points$y, points$z, type="s", size=1, lit=TRUE, main="coral trait space", xlab="PC1", ylab="PC2", zlab="PC3", col=c("slategrey", "red"))
plot3d(points$x, points$y, points$z, group=points$group, type="s", size=1, lit=TRUE, main="coral trait space", xlab="PC1", ylab="PC2", zlab="PC3", col=c("slategrey", "red"))
points$group
# 3D interactive plots#
#
library("car")#
library("rgl")#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$cols<-as.factor(ifelse(points$species %in% spread$species, "red","slategrey"))#
points$labs<-ifelse(points$group=="y",points$species, "")#
head(points)#
plot3d(points$x, points$y, points$z, group=points$group, type="s", size=1, lit=TRUE, main="coral trait space", xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols)
lot3d(points$x, points$y, points$z, group=points$group, type="s", size=1, lit=TRUE, main="coral trait space", xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, radius=0.1)
plot3d(points$x, points$y, points$z, group=points$group, type="s", size=1, lit=TRUE, main="coral trait space", xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, radius=0.1)
plot3d(points$x, points$y, points$z, group=points$group, type="s", size=1, lit=TRUE, main="coral trait space", xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.1)
plot3d(points$x, points$y, points$z, group=points$group, type="s", size=1, lit=TRUE, main="coral trait space", xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=1)
plot3d(points$x, points$y, points$z, group=points$group, type="s", lit=TRUE, main="coral trait space", xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=2)
plot3d(points$x, points$y, points$z, group=points$group, type="s", lit=TRUE, main="coral trait space", xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.1)
plot3d(points$x, points$y, points$z, group=points$group, type="s", lit=TRUE, main="coral trait space", xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5)
plot3d(points$x, points$y, points$z, group=points$group, type="s", lit=TRUE, main="coral trait space", xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=F)
plot3d(points$x, points$y, points$z, group=points$group, type="s", lit=TRUE, main="coral trait space", xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE)
plot3d(points$x, points$y, points$z, group=points$group, type="s", lit=TRUE,  xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d()
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d("x")
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d("axes3d")
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d("x")#
axes3d("y")#
axes3d("z")
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z")
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x--", "y--", "z"))
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
  mtext3d('x-axis', 'x'  , at= max(x) + 0.4)#
   mtext3d('y-axis', 'y'  , at= max(y) + 0.4)#
   mtext3d('z-axis', 'z++', at= max(z) + 0.4)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x, points$y, points$z, label=points$labs, cex = 2)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x, points$y, points$z, texts=points$labs, cex = 2)
points$labs
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$cols<-as.factor(ifelse(points$species %in% spread$species, "red","slategrey"))#
points$labs<-ifelse(points$group=="red",points$species, "")#
head(points)#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x, points$y, points$z, texts=points$labs, cex = 2)
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$cols<-as.factor(ifelse(points$species %in% spread$species, "red","slategrey"))#
points$labs<-ifelse(points$cols=="red",points$species, "")#
head(points)#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x, points$y, points$z, texts=points$labs, cex = 2)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x, points$y, points$z, texts=points$labs, cex = 1)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x, points$y, points$z, texts=points$labs, cex = 0.1)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x, points$y, points$z, texts=points$labs, cex = 0.25)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.5, points$z, texts=points$labs, cex = 0.25)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.25)
lot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.45)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$cols<-as.factor(ifelse(points$species %in% spread$species, "red","slategrey"))#
points$labs<-ifelse(points$cols=="red",points$species, "")#
sub<-points[points$cols=="red",]#
#
head(points)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
segment3d(0,0,0, sub$x, sub$y, sub$z)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
segments3d(0,0,0, sub$x, sub$y, sub$z)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
segments3d(0,0,0, sub$x, sub$y, sub$z, col='red')#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
arrow3d(p0=c(0,0,0), p1=c(sub$x, sub$y, sub$z), col='red')#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")
sub$x
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
segment3d(p0=c(0,0,0), p1=c(sub$x, sub$y, sub$z), col='red')#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
segments3d(p0=c(0,0,0), p1=c(sub$x, sub$y, sub$z), col='red')#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
segments3d(sub$x, sub$y, sub$z, col='red')#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")
segs<-cbind(sub, data.frame(xend=rep(0,nrow(sub))),yend=rep(0,nrow(sub))),zend=rep(0,nrow(sub))))
data.frame(xend=rep(0,nrow(sub)),yend=rep(0,nrow(sub)),zend=rep(0,nrow(sub))))
rep(0,nrow(sub))
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$cols<-as.factor(ifelse(points$species %in% spread$species, "red","slategrey"))#
points$labs<-ifelse(points$cols=="red",points$species, "")#
sub<-points[points$cols=="red",]#
segs<-cbind(sub, data.frame(xend=rep(0,nrow(sub)),yend=rep(0,nrow(sub)),zend=rep(0,nrow(sub))))
segs
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),#
           y=as.vector(t(seg[,c("y","yend")])),#
           z=as.vector(t(seg[,c("z","zend")])))
# 3D interactive plots#
#
library("car")#
library("rgl")#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$cols<-as.factor(ifelse(points$species %in% spread$species, "red","slategrey"))#
points$labs<-ifelse(points$cols=="red",points$species, "")#
sub<-points[points$cols=="red",]#
seg<-cbind(sub, data.frame(xend=rep(0,nrow(sub)),yend=rep(0,nrow(sub)),zend=rep(0,nrow(sub))))#
head(points)#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),#
           y=as.vector(t(seg[,c("y","yend")])),#
           z=as.vector(t(seg[,c("z","zend")])))
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red')
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='grey')
# 3D interactive plots#
#
library("car")#
library("rgl")#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$cols<-as.factor(ifelse(points$species %in% spread$species, "red","grey"))#
points$labs<-ifelse(points$cols=="red",points$species, "")#
sub<-points[points$cols=="red",]#
seg<-cbind(sub, data.frame(xend=rep(0,nrow(sub)),yend=rep(0,nrow(sub)),zend=rep(0,nrow(sub))))#
head(points)#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='grey')
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
plot<-plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
plot
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.5)
writeWebGL(dir = "webGL", filename = file.path(dir, "data/index.html"), #
           template = system.file(file.path("WebGL", "template.html"), package = "rgl"),#
           prefix = "",#
           snapshot = TRUE, commonParts = TRUE, reuse = NULL, #
           font = "Arial", width, height)#
           writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.5)
# -- mike wd -- ##
#setwd("/Users/mikemcwilliam/Documents/PostDoc/species_choice")#
source("data_prep.R")#
# Anyalsis#
library(tripack)#
source("R/functions.R")#
#
# points selection#
#
#n <- 100 # total species#
#s <- 20  # species selected#
#dat <- data.frame(x=rnorm(n), y=rnorm(n))#
#plot(y ~ x, dat, col="grey")#
#
# random#
#points(y ~ x, dat[sample(1:n, s, replace=FALSE),], col="red", pch=20, cex=0.6)#
#
# most evenly spread#
#points(y ~ x, voronoiFilter(dat, s), col="blue", pch=20, cex=0.6)
dat<-read.csv("data/data.csv")#
dat$Abundance.GBR<-factor(dat$Abundance.GBR, levels=c("rare","uncommon", "common"))#
# pnas traits#
cats<-c("cat_growthrate", "cat_corallitesize", "cat_colonydiameter" , "cat_skeletaldensity", "cat_colonyheight","cat_SA_vol", "cat_spacesize")#
pca<-prcomp(dat[,cats], center=T, scale=T)#
points<-data.frame(species=dat$species, pc1=pca$x[,1],pc2=pca$x[,2],pc3=pca$x[,3],pc4=pca$x[,4])#
#biplot(pca)
# DIAZ PLOT#
library("vegan")#
library("ks")#
#
prin<-princomp((dat[,cats]), cor = TRUE, scores = TRUE)#
pc12<-prin$scores[,1:2]#
ll<-prin$loadings#
#
################ KERNEL DENSITY ESTIMATION ###############################
H <- Hpi(x=pc12)      # optimal bandwidth estimation#
est<- kde(x=pc12, H=H, compute.cont=TRUE)    # kernel density estimation#
#
# set contour probabilities for drawing contour levels#
cl<-contourLevels(est, prob=c(0.5, 0.05, 0.001), approx=TRUE)#
#
fit<-envfit(pc12, dat[,cats]) # use envfit for drawing arrows#
fit2<-fit$vectors$arrows*-1 # drawing line segments opposite arrows#
fit2[1,]<-fit2[1,]*3 # leafarea#
fit2[2,]<-fit2[2,]*3 # leaf N#
fit2[3,]<-fit2[3,]*3 # LMA#
fit2[4,]<-fit2[4,]*3 # height#
fit2[5,]<-fit2[5,]*3 # seed mass#
 fit2[6,]<-fit2[6,]*3 # stem density#
 fit2[7,]<-fit2[7,]*3 # stem density#
#
par(mar=c(4,4,2,2))#
plot(est, cont=seq(1,100,by=1), display="filled.contour2", add=FALSE, ylab="", xlab="", cex.axis=0.75, ylim=c(-3, 3.5), xlim=c(-4, 5),las=1) #
plot(est,abs.cont=cl[1], labels=c(0.5),labcex=0.75, add=TRUE, lwd=0.75, col="grey30")#
plot(est,abs.cont=cl[2], labels=c(0.95),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
plot(est,abs.cont=cl[3], labels=c(0.99),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
points( pc12[,], pch=16, cex=0.25, col="black") #
plot(fit, cex=0.90, col=1, labels=list(vectors = c("GR","CW","MCS","SD","CH","SAV","IS")))#
segments(0,0, fit2[,1], fit2[,2], col=1, lty=2, lwd=1)#
mtext("PC1", cex=0.75, side=1, line=0.5, adj=1)#
mtext("PC2", cex=0.75, side=2, line=0.5, at=5.3) #, las=2)
# Only common species#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
abuns<-cbind(points, abun=dat$Abundance.GBR, species=dat$species)#
comm<-abuns[abuns$abun=="common",c("x","y")]#
head(comm)#
#
nrow(comm)#
n <- nrow(comm) # total species#
s <- 30  # species selected#
spread<-voronoiFilter(comm, s)#
spread$species<-abuns$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)#
# Clipperton species#
#
clipp<-cbind(points, clipp=dat$clipperton, species=dat$species)#
head(clipp)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=clipp[clipp$clipp==1,],aes(x,y))+#
geom_text(data=clipp[clipp$clipp==1,], aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
ggtitle("Clipperton atoll")#
# 3D interactive plots#
#
library("car")#
library("rgl")#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$cols<-as.factor(ifelse(points$species %in% spread$species, "red","grey"))#
points$labs<-ifelse(points$cols=="red",points$species, "")#
sub<-points[points$cols=="red",]#
seg<-cbind(sub, data.frame(xend=rep(0,nrow(sub)),yend=rep(0,nrow(sub)),zend=rep(0,nrow(sub))))#
head(points)#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
writeWebGL(dir = "webGL", filename = file.path(dir, "index.html"), #
           template = system.file(file.path("data/WebGL", "template.html"), package = "rgl"),#
           prefix = "",#
           snapshot = TRUE, commonParts = TRUE, reuse = NULL, #
           font = "Arial", width, height)#
           writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.5)
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
# -- mike wd -- ##
#setwd("/Users/mikemcwilliam/Documents/PostDoc/species_choice")#
source("data_prep.R")#
# Anyalsis#
library(tripack)#
source("R/functions.R")#
#
# points selection#
#
#n <- 100 # total species#
#s <- 20  # species selected#
#dat <- data.frame(x=rnorm(n), y=rnorm(n))#
#plot(y ~ x, dat, col="grey")#
#
# random#
#points(y ~ x, dat[sample(1:n, s, replace=FALSE),], col="red", pch=20, cex=0.6)#
#
# most evenly spread#
#points(y ~ x, voronoiFilter(dat, s), col="blue", pch=20, cex=0.6)#
dat<-read.csv("data/data.csv")#
dat$Abundance.GBR<-factor(dat$Abundance.GBR, levels=c("rare","uncommon", "common"))#
# pnas traits#
cats<-c("cat_growthrate", "cat_corallitesize", "cat_colonydiameter" , "cat_skeletaldensity", "cat_colonyheight","cat_SA_vol", "cat_spacesize")#
pca<-prcomp(dat[,cats], center=T, scale=T)#
points<-data.frame(species=dat$species, pc1=pca$x[,1],pc2=pca$x[,2],pc3=pca$x[,3],pc4=pca$x[,4])#
#biplot(pca)#
# DIAZ PLOT#
library("vegan")#
library("ks")#
#
prin<-princomp((dat[,cats]), cor = TRUE, scores = TRUE)#
pc12<-prin$scores[,1:2]#
ll<-prin$loadings#
#
################ KERNEL DENSITY ESTIMATION ###############################
H <- Hpi(x=pc12)      # optimal bandwidth estimation#
est<- kde(x=pc12, H=H, compute.cont=TRUE)    # kernel density estimation#
#
# set contour probabilities for drawing contour levels#
cl<-contourLevels(est, prob=c(0.5, 0.05, 0.001), approx=TRUE)#
#
fit<-envfit(pc12, dat[,cats]) # use envfit for drawing arrows#
fit2<-fit$vectors$arrows*-1 # drawing line segments opposite arrows#
fit2[1,]<-fit2[1,]*3 # leafarea#
fit2[2,]<-fit2[2,]*3 # leaf N#
fit2[3,]<-fit2[3,]*3 # LMA#
fit2[4,]<-fit2[4,]*3 # height#
fit2[5,]<-fit2[5,]*3 # seed mass#
 fit2[6,]<-fit2[6,]*3 # stem density#
 fit2[7,]<-fit2[7,]*3 # stem density#
#
par(mar=c(4,4,2,2))#
plot(est, cont=seq(1,100,by=1), display="filled.contour2", add=FALSE, ylab="", xlab="", cex.axis=0.75, ylim=c(-3, 3.5), xlim=c(-4, 5),las=1) #
plot(est,abs.cont=cl[1], labels=c(0.5),labcex=0.75, add=TRUE, lwd=0.75, col="grey30")#
plot(est,abs.cont=cl[2], labels=c(0.95),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
plot(est,abs.cont=cl[3], labels=c(0.99),labcex=0.75, add=TRUE, lwd=0.5, col="grey60")#
points( pc12[,], pch=16, cex=0.25, col="black") #
plot(fit, cex=0.90, col=1, labels=list(vectors = c("GR","CW","MCS","SD","CH","SAV","IS")))#
segments(0,0, fit2[,1], fit2[,2], col=1, lty=2, lwd=1)#
mtext("PC1", cex=0.75, side=1, line=0.5, adj=1)#
mtext("PC2", cex=0.75, side=2, line=0.5, at=5.3) #, las=2)#
# All species#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
n <- nrow(points) # total species#
s <- 20  # species selected#
spread<-voronoiFilter(points, s)#
#
spread$species<-dat$species[as.numeric(rownames(spread))]#
spread$abundance<-dat$Abundance.GBR[as.numeric(rownames(spread))]#
#
ggplot()+#
#geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.15)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y, col=abundance))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))#
# Only common species#
#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.25), y=jitter(prin$scores[,2], amount=0.25))#
#
abuns<-cbind(points, abun=dat$Abundance.GBR, species=dat$species)#
comm<-abuns[abuns$abun=="common",c("x","y")]#
head(comm)#
#
nrow(comm)#
n <- nrow(comm) # total species#
s <- 30  # species selected#
spread<-voronoiFilter(comm, s)#
spread$species<-abuns$species[as.numeric(rownames(spread))]#
#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=spread, aes(x,y))+#
geom_text(data=spread, aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
annotation_custom(ggplotGrob(#
ggplot()+#
geom_segment(data=spread, aes(x=x,y=y,xend=0,yend=0),size=0.25)+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=0.15)+#
geom_point(data=spread, aes(x,y), size=0.5)+theme_void()), #
xmin = 3, xmax = 5, ymin = 2, ymax = 3)#
# Clipperton species#
#
clipp<-cbind(points, clipp=dat$clipperton, species=dat$species)#
head(clipp)#
ggplot()+#
geom_point(data=points, aes(x,y), shape=21, col="grey", size=2)+#
geom_point(data=clipp[clipp$clipp==1,],aes(x,y))+#
geom_text(data=clipp[clipp$clipp==1,], aes(x,y, label=species), size=2, position=position_nudge(x=0.7, y=0.1))+#
scale_colour_manual(values=c("red","orange","green"))+#
theme_bw()+theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(),legend.title=element_blank(), legend.position=c(0.85,0.9), legend.key.size=unit(2, "mm"))+#
ggtitle("Clipperton atoll")#
# 3D interactive plots#
#
library("car")#
library("rgl")#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$cols<-as.factor(ifelse(points$species %in% spread$species, "red","grey"))#
points$labs<-ifelse(points$cols=="red",points$species, "")#
sub<-points[points$cols=="red",]#
seg<-cbind(sub, data.frame(xend=rep(0,nrow(sub)),yend=rep(0,nrow(sub)),zend=rep(0,nrow(sub))))#
head(points)#
#writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
#writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, bg="black")#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
#writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, bg="black")#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
par(bg="black")#
#writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, bg="black")#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
par(bg="black")#
#writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
par(bg="black")#
#writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)
par(bg="black")#
#writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("black")
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("grey")
#writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
#text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("slategrey")
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("slategrey")
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
text3d(points$x*1.1, points$y*1.1, points$z, texts=points$labs, cex = 0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("slategrey")
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.1, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("slategrey")
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.1, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("grey")
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.1, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("grey")
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, cex = 0.1, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("grey")
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, size = 0.1, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("grey")
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, size = 0.5, cex=0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("grey")
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, size = 0.5, cex=0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("grey")
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, size = 0.5, cex=0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("grey")
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, size = 0.5, cex=0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("grey")
writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, size = 0.5, cex=0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("grey")
library("car")#
library("rgl")#
points<-data.frame(x=jitter(prin$scores[,1], amount=0.15), y=jitter(prin$scores[,2], amount=0.15), z=jitter(prin$scores[,3], amount=0.15), species=dat$species)#
points$cols<-as.factor(ifelse(points$species %in% spread$species, "red","grey"))#
points$labs<-ifelse(points$cols=="red",points$species, "")#
sub<-points[points$cols=="red",]#
seg<-cbind(sub, data.frame(xend=rep(0,nrow(sub)),yend=rep(0,nrow(sub)),zend=rep(0,nrow(sub))))#
head(points)#
#
#writeWebGL()#
plot3d(points$x, points$y, points$z, group=points$group, type="s",   #
xlab="PC1", ylab="PC2", zlab="PC3", col=points$cols, size=0.5, box=FALSE, axes=F, col.panel = "black",)#
axes3d(c("x", "y", "z"))#
text3d(points$x+0.1, points$y+0.1, points$z, texts=points$labs, size = 0.5, cex=0.5, col="red")#
segments3d(x=as.vector(t(seg[,c("x","xend")])),y=as.vector(t(seg[,c("y","yend")])), z=as.vector(t(seg[,c("z","zend")])), col='red', alpha=0.1)#
           bg3d("grey")
